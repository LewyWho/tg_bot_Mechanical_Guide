import asyncio
import os
import sqlite3
import time
from aiogram.utils.exceptions import BadRequest
from aiogram import types, Dispatcher, Bot
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import state
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
import pytz
import config
import keyboards
import register
import sms
from datetime import datetime
from aiogram.dispatcher import FSMContext

from states import EnterRequestText

bot = Bot(token=config.BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
conn = sqlite3.connect('database.db')
cursor = conn.cursor()


class AnswerRequest(StatesGroup):
    waiting_for_request_id = State()
    waiting_for_response_id = State()


class ChangeAnswer(StatesGroup):
    waiting_for_question_number = State()
    waiting_for_new_answer = State()


class ChangeQuestion(StatesGroup):
    waiting_for_question_number = State()
    waiting_for_new_question = State()


@dp.message_handler(commands=['start'], state='*')
async def handler_start(message: types.Message, state: FSMContext):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "‚ôªÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand("help", "‚ùì –ü–æ–º–æ—â—å"),
        types.BotCommand("login", "üîë –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    ])
    await state.finish()
    check_ban = cursor.execute("SELECT banned FROM Users WHERE id =?", (message.from_user.id,)).fetchone()
    verify = cursor.execute('SELECT * FROM Users WHERE id =?', (message.from_user.id,)).fetchone()
    if not verify:
        await bot.send_message(chat_id=message.from_user.id,
                               text=sms.message_start())
        await bot.send_message(chat_id=message.from_user.id, text=sms.register_start())

        await bot.send_message(chat_id=message.from_user.id, text=sms.need_notification_or_not(),
                               reply_markup=await keyboards.need_notification_or_not())
    else:
        if check_ban[0] == 1:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            await bot.send_message(chat_id=message.from_user.id, text=sms.profile_user(message.from_user.id),
                                   reply_markup=await keyboards.main_menu())


@dp.message_handler(commands=['delete_user'], state='*')
async def delete_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute("SELECT role FROM Users WHERE id=?", (user_id,))
    user_role = cursor.fetchone()

    if not user_role or user_role[0] != 1:
        await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.get_args()

    if not args:
        await message.answer(
            "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_user <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>.")
        return

    try:
        user_id_to_delete = int(args)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    cursor.execute("SELECT username FROM Users WHERE id=?", (user_id_to_delete,))
    user_to_delete = cursor.fetchone()

    if not user_to_delete:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    cursor.execute("DELETE FROM Users WHERE id=?", (user_id_to_delete,))
    conn.commit()

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")


@dp.message_handler(commands=['ban_user'], state='*')
async def handler_ban_user(message: types.Message, state: FSMContext):
    args = message.get_args()
    if not args:
        await message.answer("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ban_user <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>.")
        return

    user_id = args

    cursor.execute("UPDATE Users SET banned = 1 WHERE id=?", (user_id,))
    conn.commit()

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


@dp.message_handler(commands=['check_answers'], state='*', content_types=[
    types.ContentType.TEXT,
    types.ContentType.DOCUMENT,
    types.ContentType.PHOTO,
    types.ContentType.VIDEO,
    types.ContentType.VOICE,
    types.ContentType.VIDEO_NOTE
])
async def handler_check_answers(message: types.Message, state: FSMContext):
    admins = cursor.execute("SELECT user_id FROM Admins WHERE user_id =?", (message.from_user.id,)).fetchone()
    if not admins:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    else:
        cursor.execute("""
            SELECT kr.id, kr.response_text, kr.response_media, kr.author_id, u.username
            FROM KnowledgeResponses kr
            JOIN Users u ON kr.author_id = u.id
            WHERE kr.moderated = 0
        """)
        unmoderated_answers = cursor.fetchall()

        if not unmoderated_answers:
            await message.answer("–ù–µ—Ç –Ω–µ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
            return

        for answer_id, response_text, response_media, author_id, username in unmoderated_answers:
            answer_message = f"üÜî ID –æ—Ç–≤–µ—Ç–∞: {answer_id}\n" \
                             f"üë§ –ê–≤—Ç–æ—Ä: @{username} (ID: {author_id})\n" \
                             f"üí¨ –û—Ç–≤–µ—Ç: {response_text}\n"
            if response_media:
                if response_media.startswith("AgAC"):
                    await bot.send_photo(chat_id=message.chat.id, photo=response_media, caption=answer_message)
                elif response_media.startswith("BAAC"):
                    await bot.send_video(chat_id=message.chat.id, video=response_media, caption=answer_message)
                elif response_media.startswith("AwAC"):
                    await bot.send_voice(chat_id=message.chat.id, voice=response_media, caption=answer_message)
                elif response_media.startswith("BQAC"):
                    await bot.send_document(chat_id=message.chat.id, document=response_media, caption=answer_message)
                elif response_media.startswith("DQAC"):
                    await bot.send_message(chat_id=message.chat.id, text=answer_message)
                    await bot.send_video_note(chat_id=message.chat.id, video_note=response_media)
            else:
                await message.answer(answer_message)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ ID –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /approve_answer <b>ID</b> –∏–ª–∏ "
                             "/reject_answer <b>ID</b>.")


@dp.message_handler(commands=['approve_question'])
async def approve_question(message: types.Message):
    admins = cursor.execute("SELECT user_id FROM Admins WHERE user_id =?", (message.from_user.id,)).fetchone()
    if not admins:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    else:
        question_id = message.get_args()
        if not question_id.isdigit():
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID.")
            return
        await message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å —Å ID {question_id} –±—ã–ª –ø—Ä–∏–Ω—è—Ç.")

        cursor.execute("UPDATE KnowledgeRequests SET moderated = 1 WHERE id = ?", (question_id,))
        conn.commit()

        cursor.execute("""
            SELECT rq.author_id, u.username
            FROM KnowledgeRequests rq
            JOIN Users u ON rq.author_id = u.id
            WHERE rq.id = ?
        """, (question_id,))
        result = cursor.fetchone()

        if result:
            author_id, username = result

            media_file = \
                cursor.execute("SELECT request_media FROM KnowledgeRequests WHERE id = ?", (question_id,)).fetchone()[0]

            caption = f"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —Å ID {question_id} –±—ã–ª –ø—Ä–∏–Ω—è—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ."

            if media_file:
                if media_file.startswith("AgAC"):
                    await bot.send_photo(author_id, photo=media_file, caption=caption)
                elif media_file.startswith("BAAC"):
                    await bot.send_video(author_id, video=media_file, caption=caption)
                elif media_file.startswith("AwAC"):
                    await bot.send_voice(author_id, voice=media_file, caption=caption)
                elif media_file.startswith("BQAC"):
                    await bot.send_document(author_id, document=media_file, caption=caption)
                elif media_file.startswith("DQAC"):
                    await bot.send_message(author_id, caption)
                    await bot.send_video_note(author_id, video_note=media_file, )
            else:
                response_text = \
                    cursor.execute("SELECT request_text FROM KnowledgeRequests WHERE id =?", (question_id,)).fetchone()[0]
                await bot.send_message(author_id,
                                       f"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —Å ID {question_id} –±—ã–ª –ø—Ä–∏–Ω—è—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n–í–∞—à –∑–∞–ø—Ä–æ—Å: {response_text}.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–º –≤–æ–ø—Ä–æ—Å.")


@dp.message_handler(commands=['reject_question'])
async def reject_question(message: types.Message):
    admins = cursor.execute("SELECT user_id FROM Admins WHERE user_id =?", (message.from_user.id,)).fetchone()
    if not admins:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    else:
        question_id = message.get_args()
        if not question_id.isdigit():
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID.")
            return
        await message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å —Å ID {question_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

        cursor.execute("DELETE FROM KnowledgeRequests WHERE id = ?", (question_id,))
        conn.commit()

        cursor.execute("""
            SELECT author_id
            FROM KnowledgeRequests
            WHERE id = ?
        """, (question_id,))
        result = cursor.fetchone()

        if result:
            author_id = result[0]
            await bot.send_message(author_id, f"‚ùå –í–∞—à –≤–æ–ø—Ä–æ—Å —Å ID {question_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–º –≤–æ–ø—Ä–æ—Å.")


@dp.message_handler(commands=['approve_answer'], content_types=[
    types.ContentType.TEXT,
    types.ContentType.DOCUMENT,
    types.ContentType.PHOTO,
    types.ContentType.VIDEO,
    types.ContentType.VOICE,
    types.ContentType.VIDEO_NOTE
])
async def approve_answer(message: types.Message, state: FSMContext):
    admins = cursor.execute("SELECT user_id FROM Admins WHERE user_id =?", (message.from_user.id,)).fetchone()
    if not admins:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    else:
        answer_id = message.get_args()
        if not answer_id.isdigit():
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID.")
            return

        cursor.execute("UPDATE KnowledgeResponses SET moderated = 1 WHERE id = ?", (answer_id,))
        conn.commit()

        cursor.execute("""
            SELECT kr.author_id, kr.request_id, kr.response_text, kr.response_media,
                   rq.author_id AS request_author_id, rq.request_text, t.tag_name, u.username
            FROM KnowledgeResponses kr
            JOIN KnowledgeRequests rq ON kr.request_id = rq.id
            LEFT JOIN Tags t ON rq.id_tag = t.id
            JOIN Users u ON kr.author_id = u.id
            WHERE kr.id = ?
        """, (answer_id,))
        result = cursor.fetchone()

        if result:
            author_id, request_id, response_text, response_media, request_author_id, request_text, tag_name, author_username = result

            if response_media:
                if response_media.startswith("AgAC"):
                    await bot.send_photo(author_id, response_media,
                                         caption=f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –∫ —Ç–µ–≥—É {tag_name} –±—ã–ª –ø—Ä–∏–Ω—è—Ç.\n–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.")

                    await bot.send_photo(request_author_id, response_media,
                                         caption=f"üîç –í–∞—à –∑–∞–ø—Ä–æ—Å: '{request_text}'\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞: {tag_name}\n" \
                                                 f"üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{author_id}</code>\n\n" \
                                                 f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{author_username}\n" \
                                                 f"üí¨ –ï–≥–æ –æ—Ç–≤–µ—Ç: {response_text}")
                elif response_media.startswith("BAAC"):
                    await bot.send_video(author_id, response_media,
                                         caption=f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –∫ —Ç–µ–≥—É {tag_name} –±—ã–ª –ø—Ä–∏–Ω—è—Ç.\n–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.")

                    await bot.send_video(request_author_id, response_media,
                                         caption=f"üîç –í–∞—à –∑–∞–ø—Ä–æ—Å: '{request_text}'\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞: {tag_name}\n" \
                                                 f"üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{author_id}</code>\n\n" \
                                                 f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{author_username}\n" \
                                                 f"üí¨ –ï–≥–æ –æ—Ç–≤–µ—Ç: {response_text}")
                elif response_media.startswith("AwAC"):
                    try:
                        await bot.send_voice(author_id, response_media,
                                             caption=f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –∫ —Ç–µ–≥—É {tag_name} –±—ã–ª –ø—Ä–∏–Ω—è—Ç.\n–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.")
                    except BadRequest as e:
                        await bot.send_message(author_id, text=f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –∫ —Ç–µ–≥—É {tag_name} –±—ã–ª –ø—Ä–∏–Ω—è—Ç.")
                    try:
                        await bot.send_voice(request_author_id, response_media,
                                             caption=f"üîç –í–∞—à –∑–∞–ø—Ä–æ—Å: '{request_text}'\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞: {tag_name}\n" \
                                                     f"üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{author_id}</code>\n\n" \
                                                     f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{author_username}\n" \
                                                     f"üí¨ –ï–≥–æ –æ—Ç–≤–µ—Ç: {response_text}")
                    except BadRequest as e:
                        await bot.send_message(request_author_id,
                                               text=f"üîç –í–∞—à –∑–∞–ø—Ä–æ—Å: '{request_text}'\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞: {tag_name}\n" \
                                                    f"üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{author_id}</code>\n\n" \
                                                    f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{author_username}\n" \
                                                    f"üí¨ –ï–≥–æ –æ—Ç–≤–µ—Ç: {response_text}")
                elif response_media.startswith("BQAC"):
                    await bot.send_document(author_id, response_media,
                                            caption=f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –∫ —Ç–µ–≥—É {tag_name} –±—ã–ª –ø—Ä–∏–Ω—è—Ç.\n–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.")

                    await bot.send_document(request_author_id, response_media,
                                            caption=f"üîç –í–∞—à –∑–∞–ø—Ä–æ—Å: '{request_text}'\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞: {tag_name}\n" \
                                                    f"üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{author_id}</code>\n\n" \
                                                    f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{author_username}\n" \
                                                    f"üí¨ –ï–≥–æ –æ—Ç–≤–µ—Ç: {response_text}")
                elif response_media.startswith("DQAC"):
                    try:
                        await bot.send_message(author_id, f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –∫ —Ç–µ–≥—É {tag_name} –±—ã–ª –ø—Ä–∏–Ω—è—Ç.\n–í–∞—à –æ—Ç–≤–µ—Ç: ")
                        await bot.send_video_note(author_id, response_media)
                    except BadRequest as e:
                        await bot.send_message(author_id, text=f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –∫ —Ç–µ–≥—É {tag_name} –±—ã–ª –ø—Ä–∏–Ω—è—Ç.")

                    try:
                        await bot.send_message(request_author_id,
                                               text=f"üîç –í–∞—à –∑–∞–ø—Ä–æ—Å: '{request_text}'\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞: {tag_name}\n" \
                                                    f"üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{author_id}</code>\n\n" \
                                                    f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{author_username}\n" \
                                                    f"üí¨ –ï–≥–æ –æ—Ç–≤–µ—Ç: {response_text}")
                        await bot.send_video_note(request_author_id, response_media)
                    except BadRequest as e:
                        await bot.send_message(request_author_id,
                                               text=f"üîç –í–∞—à –∑–∞–ø—Ä–æ—Å: '{request_text}'\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞: {tag_name}\n" \
                                                    f"üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{author_id}</code>\n\n" \
                                                    f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{author_username}\n" \
                                                    f"üí¨ –ï–≥–æ –æ—Ç–≤–µ—Ç: {response_text}")
            else:
                await bot.send_message(author_id, f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –∫ —Ç–µ–≥—É {tag_name} –±—ã–ª –ø—Ä–∏–Ω—è—Ç.\n–í–∞—à –æ—Ç–≤–µ—Ç: {response_text}")

                await bot.send_message(request_author_id,
                                       text=f"üîç –í–∞—à –∑–∞–ø—Ä–æ—Å: '{request_text}'\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞: {tag_name}\n" \
                                            f"üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{author_id}</code>\n\n" \
                                            f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{author_username}\n" \
                                            f"üí¨ –ï–≥–æ –æ—Ç–≤–µ—Ç: {response_text}")

            await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–∞.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ.")


@dp.message_handler(commands=['reject_answer'])
async def reject_answer(message: types.Message):
    admins = cursor.execute("SELECT user_id FROM Admins WHERE user_id =?", (message.from_user.id,)).fetchone()
    if not admins:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    else:
        answer_id = message.get_args()
        if not answer_id.isdigit():
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID.")
            return

        cursor.execute("""
            SELECT author_id
            FROM KnowledgeResponses
            WHERE id = ?
        """, (answer_id,))
        result = cursor.fetchone()

        if result:
            author_id = result[0]
            await bot.send_message(author_id, f"‚ùå –í–∞—à –æ—Ç–≤–µ—Ç —Å ID {answer_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

            cursor.execute("DELETE FROM KnowledgeResponses WHERE id = ?", (answer_id,))
            conn.commit()
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ.")


@dp.message_handler(commands=['check_questions'], state='*', content_types=[
    types.ContentType.TEXT,
    types.ContentType.DOCUMENT,
    types.ContentType.PHOTO,
    types.ContentType.VIDEO,
    types.ContentType.VOICE,
    types.ContentType.VIDEO_NOTE
])
async def handler_check_questions(message: types.Message, state: FSMContext):
    admins = cursor.execute("SELECT user_id FROM Admins WHERE user_id =?", (message.from_user.id,)).fetchone()
    if not admins:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    else:
        cursor.execute("""
            SELECT rq.id, rq.request_text, rq.request_media, rq.author_id, u.username
            FROM KnowledgeRequests rq
            JOIN Users u ON rq.author_id = u.id
            LEFT JOIN KnowledgeResponses kr ON rq.id = kr.request_id
            WHERE rq.moderated = 0
        """)
        unmoderated_questions = cursor.fetchall()

        if not unmoderated_questions:
            await message.answer("–ù–µ—Ç –Ω–µ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        for question_id, request_text, request_media, author_id, username in unmoderated_questions:
            question_message = f"üÜî ID –≤–æ–ø—Ä–æ—Å–∞: {question_id}\n" \
                               f"üë§ –ê–≤—Ç–æ—Ä: @{username} (ID: <code>{author_id}</code>)\n" \
                               f"üí¨ –í–æ–ø—Ä–æ—Å: {request_text}\n"
            if request_media:
                if request_media.startswith("AgAC"):
                    await bot.send_photo(chat_id=message.chat.id, photo=request_media, caption=question_message)
                elif request_media.startswith("BAAC"):
                    await bot.send_video(chat_id=message.chat.id, video=request_media, caption=question_message)
                elif request_media.startswith("AwAC"):
                    await bot.send_voice(chat_id=message.chat.id, voice=request_media, caption=question_message)
                elif request_media.startswith("BQAC"):
                    await bot.send_document(chat_id=message.chat.id, document=request_media, caption=question_message)
                elif request_media.startswith("DQAC"):
                    await bot.send_message(chat_id=message.chat.id, text=question_message)
                    await bot.send_video_note(chat_id=message.chat.id, video_note=request_media)
            else:
                await message.answer(question_message)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /approve_question <b>ID</b> –∏–ª–∏ "
                             "/reject_question <b>ID</b>.")


@dp.message_handler(commands=['mailing'], state='*')
async def handler_mailing(message: types.Message, state: FSMContext):
    admins = cursor.execute("SELECT user_id FROM Admins WHERE user_id =?", (message.from_user.id,)).fetchone()
    if not admins:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    else:
        args = message.get_args()
        if not args:
            await message.answer("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mailing <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>.")
            return

        sms_text = args

        sms_text = f"üí¨ –†–∞—Å—Å—ã–ª–∫–∞: {sms_text}"

        cursor.execute("SELECT id FROM Users")
        user_ids = cursor.fetchall()

        for user_id in user_ids:
            try:
                await bot.send_message(chat_id=user_id[0], text=sms_text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id[0]}: {e}")

        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@dp.message_handler(commands=['unban_user'], state='*')
async def handler_unban_user(message: types.Message, state: FSMContext):
    admins = cursor.execute("SELECT user_id FROM Admins WHERE user_id =?", (message.from_user.id,)).fetchone()
    if not admins:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    else:
        args = message.get_args()
        if not args:
            await message.answer("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unban_user <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>.")
            return

        user_id = args

        cursor.execute("UPDATE Users SET banned = 0 WHERE id=?", (user_id,))
        conn.commit()

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


@dp.message_handler(commands=['sms_user'], state='*')
async def handler_sms_user(message: types.Message, state: FSMContext):
    admins = cursor.execute("SELECT user_id FROM Admins WHERE user_id =?", (message.from_user.id,)).fetchone()
    if not admins:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    else:
        args = message.get_args()
        if not args:
            await message.answer("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sms_user <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> <b>—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>.")
            return

        try:
            user_id, sms_text = args.split(maxsplit=1)
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sms_user <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> <b>—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>.")
            return

        cursor.execute("SELECT username FROM Users WHERE id=?", (user_id,))
        username = cursor.fetchone()
        if username:
            username = username[0]
        else:
            username = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        sms_text = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{sms_text}"

        await bot.send_message(chat_id=user_id, text=sms_text)
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} ({username}).")


@dp.message_handler(commands=['login'], state='*')
async def handler_login_admin(message: types.Message, state: FSMContext):
    args = message.get_args()
    if not args:
        await message.answer("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login <b>–ø–∞—Ä–æ–ª—å</b>.")
        return

    user_id = message.from_user.id

    cursor.execute("SELECT password FROM Admins WHERE user_id=?", (user_id,))
    admin_password = cursor.fetchone()

    if not admin_password:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if args == admin_password[0]:
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        cursor.execute("UPDATE Users SET role = 1 WHERE id =?", (user_id,))
        conn.commit()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message_handler(commands=['admin_help'], state='*')
async def handler_admin_help(message: types.Message, state: FSMContext):
    admins = cursor.execute("SELECT user_id FROM Admins WHERE user_id =?", (message.from_user.id,)).fetchone()
    if not admins:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    else:
        admin = cursor.execute('SELECT * FROM Admins WHERE user_id =?', (message.from_user.id,)).fetchone()[0]
        if admin:
            await bot.send_message(chat_id=message.from_user.id, text=sms.admin_help())


@dp.message_handler(commands=['users'], state='*')
async def handler_users(message: types.Message, state: FSMContext):
    cursor.execute("""
        SELECT u.id, u.username, u.rank_user, COUNT(DISTINCT kr.id) AS total_responses, COUNT(DISTINCT rq.id) AS total_requests
        FROM Users u
        LEFT JOIN KnowledgeResponses kr ON u.id = kr.author_id
        LEFT JOIN KnowledgeRequests rq ON u.id = rq.author_id
        GROUP BY u.id, u.username, u.rank_user
    """)
    users_data = cursor.fetchall()

    temp_file_path = "users.txt"
    with open(temp_file_path, "w", encoding="utf-8") as file:
        users_message = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        for user_id, username, rank_user, total_responses, total_requests in users_data:
            if not username:
                username = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if username == "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                username = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            else:
                username = f"@{username}"
            users_message += f"üÜî ID: {user_id}\n" \
                             f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n" \
                             f"üèÖ –†–∞–Ω–≥: {rank_user}\n" \
                             f"üí° –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–Ω–∞–Ω–∏—è: {total_requests}\n" \
                             f"üí¨ –û—Ç–≤–µ—Ç–æ–≤: {total_responses}\n" \
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            file.write(users_message)

    if len(users_data) > 15:
        with open(temp_file_path, "rb") as file:
            await message.answer_document(file)
        os.remove(temp_file_path)
    else:
        await message.answer(users_message)


@dp.message_handler(commands=['cancel'], state='*')
async def cancel_operation(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@dp.message_handler(commands=['a_change'], state='*')
async def handler_a_change(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute("""
        SELECT kr.id, kr.request_id, kr.response_text, kr.response_media, rq.request_text, t.tag_name
        FROM KnowledgeResponses kr
        JOIN KnowledgeRequests rq ON kr.request_id = rq.id
        JOIN Tags t ON rq.id_tag = t.id
        WHERE kr.author_id=?
    """, (user_id,))
    user_responses = cursor.fetchall()
    if not user_responses:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    for index, response in enumerate(user_responses, start=1):
        response_message = f"{index}. –ó–∞–ø—Ä–æ—Å: {response[4]}\n–¢–µ–≥: {response[5]}\n–û—Ç–≤–µ—Ç: {response[2]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        if response[3]:
            media_file_id = response[3]
            if media_file_id.startswith("AgAC"):
                await bot.send_photo(chat_id=message.chat.id, photo=media_file_id, caption=response_message)
            elif media_file_id.startswith("BAAC"):
                await bot.send_video(chat_id=message.chat.id, video=media_file_id, caption=response_message)
            elif media_file_id.startswith("AwAC"):
                await bot.send_voice(chat_id=message.chat.id, voice=media_file_id, caption=response_message)
            elif media_file_id.startswith("BQAC"):
                await bot.send_document(chat_id=message.chat.id, document=media_file_id, caption=response_message)
            elif media_file_id.startswith("DQAC"):
                await bot.send_message(chat_id=message.chat.id, text=response_message)
                await bot.send_video_note(chat_id=message.chat.id, video_note=media_file_id)
        else:
            await message.answer(response_message)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n/cancel - –¥–ª—è –æ—Ç–º–µ–Ω—ã\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")

    await ChangeAnswer.waiting_for_question_number.set()


@dp.message_handler(state=ChangeAnswer.waiting_for_question_number, content_types=[
    types.ContentType.TEXT,
    types.ContentType.DOCUMENT,
    types.ContentType.PHOTO,
    types.ContentType.VIDEO,
    types.ContentType.VOICE,
    types.ContentType.VIDEO_NOTE
])
async def process_question_number(message: types.Message, state: FSMContext):
    try:
        question_number = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.")
        return

    async with state.proxy() as data:
        data['question_number'] = question_number

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:")

    await ChangeAnswer.waiting_for_new_answer.set()


@dp.message_handler(state=ChangeAnswer.waiting_for_new_answer, content_types=[
    types.ContentType.TEXT,
    types.ContentType.DOCUMENT,
    types.ContentType.PHOTO,
    types.ContentType.VIDEO,
    types.ContentType.VOICE,
    types.ContentType.VIDEO_NOTE
])
async def process_new_answer(message: types.Message, state: FSMContext):
    new_answer = message.text

    async with state.proxy() as data:
        user_id = message.from_user.id
        question_number = data['question_number']

    media_file_id = None

    if message.photo:
        media_file_id = message.photo[-1].file_id
    elif message.video:
        media_file_id = message.video.file_id
    elif message.voice:
        media_file_id = message.voice.file_id
    elif message.document:
        media_file_id = message.document.file_id
    elif message.video_note:
        media_file_id = message.video_note.file_id
    elif message.text:
        if not new_answer:
            await message.answer("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç.")
            return

    cursor.execute(
        "UPDATE KnowledgeResponses SET response_text=?, response_media=?, moderated=0 WHERE id=? AND author_id=?",
        (new_answer, media_file_id, question_number, user_id))
    conn.commit()

    await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

    all_admins = cursor.execute("SELECT user_id FROM Admins").fetchall()
    for admin in all_admins:
        await bot.send_message(chat_id=admin[0], text=f"üì© –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.\n\n"
                                                      f"üí≠ –ó–∞–ø—Ä–æ—Å: {new_answer}\n\n"
                                                      f"üìñ –û—Ç–≤–µ—Ç: {new_answer}\n\n"
                                                      f"üÜî ID: {question_number}")

    await state.finish()


@dp.message_handler(commands=['q_change'], state='*')
async def handler_q_change(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute("""
        SELECT kr.id, kr.request_text, kr.request_media, kr.id_tag, t.tag_name
        FROM KnowledgeRequests kr
        JOIN Tags t ON kr.id_tag = t.id
        WHERE kr.author_id=?
    """, (user_id,))
    user_questions = cursor.fetchall()
    if not user_questions:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    for index, question in enumerate(user_questions, start=1):
        question_message = f"{index}. –í–∞—à –≤–æ–ø—Ä–æ—Å: {question[1]}\n–¢–µ–≥: {question[4]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        if question[2]:
            media_file_id = question[2]
            if media_file_id.startswith("AgAC"):
                await bot.send_photo(chat_id=message.chat.id, photo=media_file_id, caption=question_message)
            elif media_file_id.startswith("BAAC"):
                await bot.send_video(chat_id=message.chat.id, video=media_file_id, caption=question_message)
            elif media_file_id.startswith("AwAC"):
                await bot.send_voice(chat_id=message.chat.id, voice=media_file_id, caption=question_message)
            elif media_file_id.startswith("BQAC"):
                await bot.send_document(chat_id=message.chat.id, document=media_file_id, caption=question_message)
            elif media_file_id.startswith("DQAC"):
                await bot.send_message(chat_id=message.chat.id, text=question_message)
                await bot.send_video_note(chat_id=message.chat.id, video_note=media_file_id)
        else:
            await message.answer(question_message)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n/cancel - –¥–ª—è –æ—Ç–º–µ–Ω—ã\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")

    await ChangeQuestion.waiting_for_question_number.set()


@dp.message_handler(state=ChangeQuestion.waiting_for_question_number, content_types=[
    types.ContentType.TEXT,
    types.ContentType.DOCUMENT,
    types.ContentType.PHOTO,
    types.ContentType.VIDEO,
    types.ContentType.VOICE,
    types.ContentType.VIDEO_NOTE
])
async def process_question_number(message: types.Message, state: FSMContext):
    try:
        question_number = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.")
        return
    async with state.proxy() as data:
        data['question_number'] = question_number
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
    await ChangeQuestion.waiting_for_new_question.set()


@dp.message_handler(state=ChangeQuestion.waiting_for_new_question, content_types=[
    types.ContentType.TEXT,
    types.ContentType.DOCUMENT,
    types.ContentType.PHOTO,
    types.ContentType.VIDEO,
    types.ContentType.VOICE,
    types.ContentType.VIDEO_NOTE
])
async def process_new_question(message: types.Message, state: FSMContext):
    new_question = message.text
    media_file_id = None

    if message.photo:
        media_file_id = message.photo[-1].file_id
    elif message.video:
        media_file_id = message.video.file_id
    elif message.voice:
        media_file_id = message.voice.file_id
    elif message.document:
        media_file_id = message.document.file_id
    elif message.video_note:
        media_file_id = message.video_note.file_id

    if not new_question and not media_file_id:
        await message.answer("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª.")
        return

    async with state.proxy() as data:
        user_id = message.from_user.id
        question_number = data['question_number']

    cursor.execute(
        "UPDATE KnowledgeRequests SET request_text=?, request_media=?, moderated=0 WHERE id=? AND author_id=?",
        (new_question, media_file_id, question_number, user_id))
    conn.commit()
    await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

    admins = cursor.execute("SELECT user_id FROM Admins").fetchall()
    for admin in admins:
        await bot.send_message(chat_id=admin[0], text=f"üì© –í–æ–ø—Ä–æ—Å {question_number} –∏–∑–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
    await state.finish()


@dp.message_handler(commands=['cancel'], state='*')
async def cancel_operation(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@dp.message_handler(commands=['help'], state='*')
async def handler_help(message: types.Message):
    await message.answer(sms.help_message())


@dp.message_handler(commands=['sms'], state='*')
async def send_message_to_user(message: types.Message):
    try:
        from_user_id = message.from_user.id

        command_args = message.get_args().split()
        if len(command_args) < 2:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sms {user_id|username} {—Ç–µ–∫—Å—Ç}")
            return

        receiver = command_args[0]
        text = ' '.join(command_args[1:])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ receiver —á–∏—Å–ª–æ–º (user_id)
        if receiver.isdigit():
            receiver_id = int(receiver)
            user = await bot.get_chat(receiver_id)
        else:
            # –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
            user = await bot.get_chat(receiver)

        if user:
            verify_try = cursor.execute("SELECT needed_sms_for_user FROM Users WHERE id =?", (user.id,)).fetchone()[0]

            if verify_try == 1:
                await bot.send_message(user.id,
                                       f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\nüÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{from_user_id}</code>\n–¢–µ–∫—Å—Ç: {text}")
                await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            else:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.")
        else:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.message_handler(commands=['my_settings'], state='*')
async def my_settings(message: types.Message):
    user_id = message.from_user.id

    cursor.execute("SELECT needed_sms_for_user, notification_preferences FROM Users WHERE id=?", (user_id,))
    settings = cursor.fetchone()

    needed_sms_for_user, notification_preferences = settings

    text = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    if needed_sms_for_user == 0:
        text += "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
    else:
        text += "‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
    text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    text += "‚ùì –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n"
    text += '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'

    keyboard_sms = InlineKeyboardMarkup()
    if needed_sms_for_user == 0:
        keyboard_sms.add(InlineKeyboardButton("–î–∞", callback_data='my_settings_yes_needed_sms_for_user'))
    else:
        keyboard_sms.add(InlineKeyboardButton("–ù–µ—Ç", callback_data='my_settings_no_needed_sms_for_user'))

    await bot.send_message(user_id, text, reply_markup=keyboard_sms)

    text = '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'

    if notification_preferences == 0:
        text += '‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n'
    else:
        text += '‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n'

    text += '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    text += '‚ùì –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É?\n'
    text += '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'

    keyboard_notification = InlineKeyboardMarkup()
    if notification_preferences == 0:
        keyboard_notification.add(InlineKeyboardButton("–î–∞", callback_data='my_settings_yes_notification_preferences'))
    else:
        keyboard_notification.add(InlineKeyboardButton("–ù–µ—Ç", callback_data='my_settings_no_notification_preferences'))

    await bot.send_message(user_id, text, reply_markup=keyboard_notification)


@dp.callback_query_handler(text='check_rating')
async def check_rating(callback_query: types.CallbackQuery):
    try:
        cursor.execute('''
            SELECT author_id, SUM(votes) AS total_votes
            FROM (
                SELECT author_id, votes
                FROM KnowledgeRequests
                UNION ALL
                SELECT author_id, votes
                FROM KnowledgeResponses
            ) AS combined
            GROUP BY author_id
            ORDER BY total_votes DESC
            LIMIT 5
        ''')

        top_users = cursor.fetchall()

        if top_users:
            rating_message = "–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤:\n"
            for idx, (author_id, total_votes) in enumerate(top_users, start=1):
                rating_message += f"{idx} –º–µ—Å—Ç–æ.\nüÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {author_id}\nüó≥ –í—Å–µ–≥–æ {total_votes} –≥–æ–ª–æ—Å–æ–≤\n‚≠êÔ∏è –ó–≤–∞–Ω–∏–µ: {cursor.execute('SELECT rank_user FROM Users WHERE id =?', (author_id,)).fetchone()[0]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        else:
            rating_message = "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Ç–∏–Ω–≥–µ."

        await bot.send_message(callback_query.from_user.id, rating_message)

    except Exception as e:
        await bot.send_message(callback_query.from_user.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('select_tag_'))
async def select_tag(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞."""
    try:
        tag_id = callback_query.data.split('_')[-1]
        tag_name = cursor.execute("SELECT tag_name FROM Tags WHERE id = ?", (tag_id,)).fetchone()[0]

        async with state.proxy() as data:
            data['tag_id'] = tag_id

        await bot.send_message(chat_id=callback_query.from_user.id, text=sms.get_tag(tag_name),
                               reply_markup=await keyboards.button_for_tags(tag_id))
    except Exception as e:
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('my_requests_'))
async def my_requests(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_id = callback_query.from_user.id
        tag_id = callback_query.data.split('_')[-1]

        cursor.execute("""
            SELECT request_text, request_media, votes, timestamp, moderated 
            FROM KnowledgeRequests 
            WHERE id_tag = ? AND author_id = ?
        """, (tag_id, user_id))

        user_requests = cursor.fetchall()

        if user_requests:
            response_text = "–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:\n"
            for idx, request in enumerate(user_requests, start=1):
                request_text, request_media, votes, timestamp, moderated = request
                response_text += f"üîç –ó–∞–ø—Ä–æ—Å: {request_text}\n"
                response_text += f"üî¢ –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: {idx}\n"
                if request_media:
                    if request_media.startswith("AgAC"):
                        await bot.send_photo(chat_id=user_id, photo=request_media)
                    elif request_media.startswith("BAAC"):
                        await bot.send_video(chat_id=user_id, video=request_media)
                    elif request_media.startswith("AwAC"):
                        await bot.send_voice(chat_id=user_id, voice=request_media)
                    elif request_media.startswith("BQAC"):
                        await bot.send_document(chat_id=user_id, document=request_media)
                    elif request_media.startswith("DQAC"):
                        await bot.send_video_note(chat_id=user_id, video_note=request_media)
                response_text += f"üëç –ì–æ–ª–æ—Å–∞: {votes}\n"
                response_text += f"üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {timestamp}\n"
                response_text += f"üõ° –ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {'–î–∞' if moderated else '–ù–µ—Ç'}\n\n"
        else:
            response_text = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–µ–≥—É."

        if user_requests and any(request[2] != 0 for request in user_requests):
            await bot.send_message(chat_id=user_id, text=response_text, reply_markup=await keyboards.check_my_answer())
        else:
            await bot.send_message(chat_id=user_id, text=response_text)

    except Exception as e:
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('create_request_'), state='*')
async def create_request(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    try:
        tag_id = callback_query.data.split('_')[-1]

        await state.update_data(tag_id=tag_id)
        await EnterRequestText.waiting_for_request_text.set()

        await bot.send_message(chat_id=callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
    except Exception as e:
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.message_handler(state=EnterRequestText.waiting_for_request_text, content_types=[
    types.ContentType.TEXT,
    types.ContentType.DOCUMENT,
    types.ContentType.PHOTO,
    types.ContentType.VIDEO,
    types.ContentType.VOICE,
    types.ContentType.VIDEO_NOTE
])
async def process_request_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞."""
    try:
        request_text = message.text.strip() if message.text else ""
        async with state.proxy() as data:
            tag_id = data['tag_id']

        media_file_id = None
        if message.photo:
            media_file_id = message.photo[-1].file_id
        elif message.video:
            media_file_id = message.video.file_id
        elif message.voice:
            media_file_id = message.voice.file_id
        elif message.document:
            media_file_id = message.document.file_id
        elif message.video_note:
            media_file_id = message.video_note.file_id

        cursor.execute(
            "INSERT INTO KnowledgeRequests (author_id, request_text, request_media, id_tag) VALUES (?, ?, ?, ?)",
            (message.from_user.id, request_text, media_file_id, tag_id))
        conn.commit()

        text_tag = cursor.execute("SELECT tag_name FROM Tags WHERE id =?", (tag_id,)).fetchone()[0]

        request_id = cursor.execute("SELECT id FROM KnowledgeRequests WHERE author_id =? AND id_tag =?",
                                    (message.from_user.id, tag_id)).fetchone()[0]

        await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")

        admins = cursor.execute("SELECT user_id FROM Admins").fetchall()
        for admin in admins:
            if media_file_id:
                if media_file_id.startswith("AgAC"):
                    await bot.send_photo(chat_id=admin[0], photo=media_file_id,
                                         caption=f"üìñ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–≥–∞ {text_tag}: {request_text}\n<code>/approve_question {request_id}</code> –∏–ª–∏ <code>/reject_question {request_id}</code>")
                elif media_file_id.startswith("BAAC"):
                    await bot.send_video(chat_id=admin[0], video=media_file_id,
                                         caption=f"üìñüìñ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–≥–∞ {text_tag}: {request_text}\n<code>/approve_question {request_id}</code> –∏–ª–∏ <code>/reject_question {request_id}</code>")
                elif media_file_id.startswith("AwAC"):
                    await bot.send_voice(chat_id=admin[0], voice=media_file_id,
                                         caption=f"üìñ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–≥–∞ {text_tag}: {request_text}\n<code>/approve_question {request_id}</code> –∏–ª–∏ <code>/reject_question {request_id}</code>")
                elif media_file_id.startswith("BQAC"):
                    await bot.send_document(chat_id=admin[0], document=media_file_id,
                                            caption=f"üìñ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–≥–∞ {text_tag}: {request_text}\n<code>/approve_question {request_id}</code> –∏–ª–∏ <code>/reject_question {request_id}</code>")
                elif media_file_id.startswith("DQAC"):
                    await bot.send_video_note(chat_id=admin[0], video_note=media_file_id)
                    await bot.send_message(chat_id=admin[0],
                                           text=f"üìñ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–≥–∞ {text_tag}: {request_text}\n<code>/approve_question {request_id}</code> –∏–ª–∏ <code>/reject_question {request_id}</code>")
            else:
                await bot.send_message(chat_id=admin[0],
                                       text=f"üìñ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–≥–∞ {text_tag}: {request_text}\n<code>/approve_question {request_id}</code> –∏–ª–∏ <code>/reject_question {request_id}</code>")

        await state.finish()

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('view_all_requests_'))
async def view_all_requests_callback(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        tag_id = callback_query.data.split('_')[-1]
        async with state.proxy() as data:
            data['tag_id'] = tag_id
        cursor.execute("SELECT tag_name FROM Tags WHERE id=?", (tag_id,))
        tag_name = cursor.fetchone()[0]

        cursor.execute("""
            SELECT kr.id, kr.request_text, kr.request_media,
                   (SELECT COUNT(id) FROM KnowledgeResponses WHERE request_id = kr.id) AS num_responses,
                   EXISTS(SELECT 1 FROM KnowledgeResponses WHERE request_id = kr.id) AS has_responses,
                   kr.votes
            FROM KnowledgeRequests kr
            WHERE id_tag = ? AND moderated = 1
            ORDER BY kr.votes DESC
        """, (tag_id,))
        requests = cursor.fetchall()
        response_text = ""
        if requests:
            for request in requests:
                request_id, request_text, request_media, num_responses, has_responses, votes = request
                response_text = f"üÜî {request_id}. –ó–∞–ø—Ä–æ—Å: {request_text}\n"
                response_text += f"üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {num_responses}\n"
                response_text += f"üëç –ì–æ–ª–æ—Å–æ–≤: {votes}\n"
                if request_media:
                    if request_media.startswith("AgAC"):
                        await bot.send_photo(chat_id=callback_query.from_user.id, photo=request_media,
                                             caption=response_text)
                    elif request_media.startswith("BAAC"):
                        await bot.send_video(chat_id=callback_query.from_user.id, video=request_media,
                                             caption=response_text)
                    elif request_media.startswith("AwAC"):
                        await bot.send_voice(chat_id=callback_query.from_user.id, voice=request_media,
                                             caption=response_text)
                    elif request_media.startswith("BQAC"):
                        await bot.send_document(chat_id=callback_query.from_user.id, document=request_media,
                                                caption=response_text)
                    elif request_media.startswith("DQAC"):
                        await bot.send_message(chat_id=callback_query.from_user.id, text=response_text)
                        await bot.send_video_note(chat_id=callback_query.from_user.id, video_note=request_media)
                else:
                    await bot.send_message(chat_id=callback_query.from_user.id, text=response_text)
        else:
            kb = InlineKeyboardMarkup()
            create_request_button = InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å",
                                                         callback_data=f"create_request_{tag_id}")
            kb.add(create_request_button)

            response_text = f"‚ùå –î–ª—è —Ç–µ–≥–∞ {tag_name} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤."
            await bot.send_message(chat_id=callback_query.from_user.id, text=response_text,
                                   reply_markup=kb)
        if response_text != f"‚ùå –î–ª—è —Ç–µ–≥–∞ {tag_name} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.":
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã.',
                                   reply_markup=await keyboards.check_answers_and_create_answer(tag_id))
    except Exception as e:
        await bot.send_message(chat_id=callback_query.from_user.id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.message_handler(state=AnswerRequest.waiting_for_request_id)
async def process_request_id(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            tag_id = data.get('tag_id')

        request_id = int(message.text)

        cursor.execute("""
            SELECT kr.id, kr.request_text, t.tag_name
            FROM KnowledgeRequests kr
            LEFT JOIN Tags t ON kr.id_tag = t.id
            WHERE kr.id_tag = ? AND kr.id = ?
        """, (tag_id, request_id))
        request_info = cursor.fetchone()

        if request_info:
            request_id, request_text, tag_name = request_info

            cursor.execute("""
                SELECT response_text, response_media, author_id, timestamp, votes, id
                FROM KnowledgeResponses
                WHERE request_id = ? AND moderated = 1
                ORDER BY votes DESC
            """, (request_id,))
            responses = cursor.fetchall()

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"create_response_{request_id}"))
            keyboard.add(InlineKeyboardButton("–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"vote_question_{request_id}"))
            keyboard.add(InlineKeyboardButton("–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –æ—Ç–≤–µ—Ç", callback_data=f"vote_response_{request_id}"))

            if responses:
                await bot.send_message(chat_id=message.chat.id, text=f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                                                     f"üè∑Ô∏è ID –¢–µ–≥–∞: {tag_id}\n"
                                                                     f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞: {tag_name}\n"
                                                                     f"üìù –ó–∞–ø—Ä–æ—Å: {request_text}\n"
                                                                     f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                                                     f"üìÉ –û—Ç–≤–µ—Ç—ã:\n"
                                                                     f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
                for idx, (temp_response_text, response_media, author_id, timestamp, votes, response_id) in enumerate(
                        responses, start=1):
                    response_message = f"üí¨ –ù–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {response_id}.\nüë§ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{author_id}</code>\nüëç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: {votes}\nüïí –í—Ä–µ–º—è: {timestamp}\n"
                    response_message += f"üìÑ –û—Ç–≤–µ—Ç: {temp_response_text}\n"
                    if response_media:
                        if response_media.startswith("AgAC"):
                            await bot.send_photo(chat_id=message.chat.id, photo=response_media,
                                                 caption=response_message)
                        elif response_media.startswith("BAAC"):
                            await bot.send_video(chat_id=message.chat.id, video=response_media,
                                                 caption=response_message)
                        elif response_media.startswith("AwAC"):
                            await bot.send_voice(chat_id=message.chat.id, voice=response_media,
                                                 caption=response_message)
                        elif response_media.startswith("BQAC"):
                            await bot.send_document(chat_id=message.chat.id, document=response_media,
                                                    caption=response_message)
                        elif response_media.startswith("DQAC"):
                            await bot.send_message(chat_id=message.chat.id, text=response_message)
                            await bot.send_video_note(chat_id=message.chat.id, video_note=response_media)
                    else:
                        await bot.send_message(chat_id=message.chat.id, text=response_message)

                await bot.send_message(chat_id=message.chat.id, text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                                       reply_markup=keyboard)
            else:
                await bot.send_message(chat_id=message.chat.id, text="‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å.\n",
                                       reply_markup=keyboard)

        else:
            await bot.send_message(chat_id=message.chat.id, text="‚ùå –í–æ–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except ValueError:
        await bot.send_message(chat_id=message.chat.id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞.")

    except Exception as e:
        await bot.send_message(chat_id=message.chat.id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        await state.finish()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(f'check_answers_'))
async def check_answers(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        tag_id = callback_query.data.split('_')[-1]

        cursor.execute("""
            SELECT DISTINCT request_id FROM KnowledgeResponses
            WHERE request_id IN (
                SELECT id FROM KnowledgeRequests WHERE id_tag = ?
            )
        """, (tag_id,))
        requests_with_answers = cursor.fetchall()

        if requests_with_answers:
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã:")
            await AnswerRequest.waiting_for_request_id.set()
        else:
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã:")
            await AnswerRequest.waiting_for_request_id.set()
    except Exception as e:
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


class AnswerResponse(StatesGroup):
    waiting_for_response_text = State()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('create_response_'))
async def create_response_callback(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        request_id = callback_query.data.split('_')[-1]

        async with state.proxy() as data:
            data['request_id'] = request_id

        await bot.send_message(chat_id=callback_query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
        await AnswerResponse.waiting_for_response_text.set()

    except Exception as e:
        await bot.send_message(chat_id=callback_query.from_user.id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.message_handler(state=AnswerResponse.waiting_for_response_text, content_types=[
    types.ContentType.TEXT,
    types.ContentType.DOCUMENT,
    types.ContentType.PHOTO,
    types.ContentType.VIDEO,
    types.ContentType.VOICE,
    types.ContentType.VIDEO_NOTE
])
async def create_response(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            request_id = data['request_id']

        response_text = message.text if message.text else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞."
        author_id = message.from_user.id

        file_id = None

        if message.document:
            file_id = message.document.file_id
            await message.document.download(destination_dir='responses_documents')
        elif message.photo:
            file_id = message.photo[-1].file_id
            await message.photo[-1].download(destination_dir='responses_photos')
        elif message.video:
            file_id = message.video.file_id
            await message.video.download(destination_dir='responses_videos')
        elif message.voice:
            file_id = message.voice.file_id
            await message.voice.download(destination_dir='responses_voice_messages')
        elif message.video_note:
            file_id = message.video_note.file_id
            await message.video_note.download(destination_dir='responses_video_notes')

        if file_id:
            cursor.execute("""
                INSERT INTO KnowledgeResponses (request_id, author_id, response_text, response_media)
                VALUES (?, ?, ?, ?)
            """, (request_id, author_id, response_text, file_id))
        else:
            cursor.execute("""
                INSERT INTO KnowledgeResponses (request_id, author_id, response_text)
                VALUES (?, ?, ?)
            """, (request_id, author_id, response_text))

        conn.commit()

        await bot.send_message(chat_id=message.chat.id, text="‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")

        cursor.execute("SELECT response_text FROM KnowledgeResponses WHERE id = ?", (request_id,))
        request_text = cursor.fetchone()

        if request_text:
            request_text = request_text[0]
        else:
            request_text = "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞"

        id_answer = cursor.execute("SELECT id FROM KnowledgeResponses WHERE request_id =? AND author_id =? AND "
                                   "response_text =? AND response_media = ?", (request_id, author_id, response_text,
                                                                               file_id)).fetchone()[0]

        admins = cursor.execute("SELECT user_id FROM Admins").fetchall()
        for admin in admins:
            if file_id:
                if file_id.startswith("AgAC"):
                    await bot.send_photo(chat_id=admin[0], photo=file_id,
                                         caption=f"üì∏ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {request_text}\n<code>/approve_answer {id_answer}</code> –∏–ª–∏ <code>/reject_answer {id_answer}</code>")
                elif file_id.startswith("BAAC"):
                    await bot.send_video(chat_id=admin[0], video=file_id,
                                         caption=f"üé• –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {request_text}\n<code>/approve_answer {id_answer}</code> –∏–ª–∏ <code>/reject_answer {id_answer}</code>")
                elif file_id.startswith("AwAC"):
                    await bot.send_voice(chat_id=admin[0], voice=file_id,
                                         caption=f"üé§ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {request_text}\n<code>/approve_answer {id_answer}</code> –∏–ª–∏ <code>/reject_answer {id_answer}</code>")
                elif file_id.startswith("BQAC"):
                    await bot.send_document(chat_id=admin[0], document=file_id,
                                            caption=f"üìÑ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {request_text}\n<code>/approve_answer {id_answer}</code> –∏–ª–∏ <code>/reject_answer {id_answer}</code>")
                elif file_id.startswith("DQAC"):
                    await bot.send_message(chat_id=admin[0],
                                           text=f"üìù –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {request_text}\n<code>/approve_answer {id_answer}</code> –∏–ª–∏ <code>/reject_answer {id_answer}</code>")
                    await bot.send_video_note(chat_id=admin[0], video_note=file_id)
            else:
                await bot.send_message(chat_id=admin[0],
                                       text=f"üìù –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {request_text}\n<code>/approve_answer {id_answer}</code> –∏–ª–∏ <code>/reject_answer {id_answer}</code>")

        await state.finish()

    except Exception as e:
        await bot.send_message(chat_id=message.chat.id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('vote_question_'))
async def vote_question(callback_query: types.CallbackQuery):
    try:
        request_id = int(callback_query.data.split('_')[-1])
        user_id = callback_query.from_user.id

        cursor.execute("SELECT 1 FROM QuestionVotes WHERE user_id = ? AND question_id = ?", (user_id, request_id))
        existing_vote = cursor.fetchone()

        if existing_vote:
            await bot.answer_callback_query(callback_query.id, text="‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!")
        else:
            cursor.execute("UPDATE KnowledgeRequests SET votes = votes + 1 WHERE id = ?", (request_id,))
            cursor.execute("INSERT INTO QuestionVotes (user_id, question_id) VALUES (?, ?)", (user_id, request_id))
            conn.commit()

            await bot.answer_callback_query(callback_query.id, text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –≤–æ–ø—Ä–æ—Å!")

    except Exception as e:
        await bot.send_message(chat_id=callback_query.from_user.id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('vote_response_'))
async def vote_response(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:")

        await AnswerRequest.waiting_for_response_id.set()

        async with state.proxy() as data:
            data['response_id'] = int(callback_query.data.split('_')[-1])
    except Exception as e:
        await bot.send_message(chat_id=callback_query.from_user.id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.message_handler(state=AnswerRequest.waiting_for_response_id)
async def process_response_id(message: types.Message, state: FSMContext):
    try:
        response_id = int(message.text)

        async with state.proxy() as data:
            response_id = data['response_id']

        user_id = message.from_user.id

        cursor.execute("SELECT 1 FROM ResponseVotes WHERE user_id = ? AND response_id = ?", (user_id, response_id))
        existing_vote = cursor.fetchone()

        if existing_vote:
            await message.answer("‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç!")
        else:
            cursor.execute("""
                UPDATE KnowledgeResponses
                SET votes = votes + 1
                WHERE id = ?
            """, (response_id,))
            conn.commit()

            cursor.execute("INSERT INTO ResponseVotes (user_id, response_id) VALUES (?, ?)", (user_id, response_id))
            conn.commit()

            await message.answer("‚úÖ –í–∞—à –≥–æ–ª–æ—Å –∑–∞ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Å—á–∏—Ç–∞–Ω!")

            await state.finish()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    dp.register_message_handler(handler_start, commands=['start'], state='*')
    register.all_callback(dp)
    executor.start_polling(dp, skip_updates=True)
